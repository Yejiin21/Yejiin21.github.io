<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-24T01:39:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Mergesort 003hw</title><link href="http://localhost:4000/2022/03/23/MergeSort-003HW.html" rel="alternate" type="text/html" title="Mergesort 003hw" /><published>2022-03-23T00:00:00+09:00</published><updated>2022-03-23T00:00:00+09:00</updated><id>http://localhost:4000/2022/03/23/MergeSort-003HW</id><content type="html" xml:base="http://localhost:4000/2022/03/23/MergeSort-003HW.html"><![CDATA[<h1 id="분활-정복divide-and-conquer-알고리즘이란">분활 정복(Divide-and-Conquer) 알고리즘이란?</h1>
<p>주어진 문제의 입력을 분활하여 문제를 해결(정복)하는 방식의 알고리즘이다.</p>

<p>분활된 입력에 대하여 동일한 알고리즘을 적용하여 해를 계산하며, 이들의 해를 취합하여 원래 문제의 해를 얻는다.</p>

<p>여기서 분활된 입력에 대한 문제를 부분문제(subproblem)이라 하고, 부분문제의 해를 부분해라고 한다.</p>

<p>부분문제는 더 이상 분할할 수 없을 때까지 계속 분할한다.</p>

<p>\(\dots\)</p>
<h1 id="합병정렬merge-sort">합병정렬(Merge Sort)</h1>
<p>합병정렬은 입력이 2개의 부분문제로 분활되고, 부분문제의 크기가 1/2로 감소하는 분활 정복 알고리즘이다.</p>

<p>즉, n개의 숫자들을 n/2개씩 2개의 부분문제로 분할하고, 각각의 부분문제를 순환적으로 합병 정렬할 후, 2개의 정렬된 부분을 합병하여 정렬(정복)한다. 즉, 합병과정이 (문제를) 정복하는 것이다.</p>

<p><em>합병(merge)이란 2개의 각각 정렬된 숫자들을 1개의 정렬된 숫자들로 합치는 것이다.</em></p>

<p><img src="https://postfiles.pstatic.net/MjAyMjAyMTBfMTcx/MDAxNjQ0NDcyNDI2OTQ5.-tTCQJ9shLYipEBlsG2-95phLvN0Kpjus-X4tBq1IYog.yKw5lRPNn2lHCp40Gj6R3Dr61Bc25yZg8BNTAwZkBAwg.GIF.agn710/mergeSortAlgorithm.gif?type=w966" alt="" /></p>

<p>ex) 배열A와 배열B가 합병되어 배열C에 저장된 것</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>배열 A : 6 14 18 20 29
                                   =&gt; 배열 C : 1 2 6 14 15 18 20 25 29 30 45
배열 B : 1 2 15 25 30 45
</code></pre></div></div>

<p>&lt;분활 정복에 기반을 둔 합병 정렬 알고리즘&gt;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       MergeSort(A,p,q)
       입력: A[p]~A[q]
       출력: 정렬된 A[p]~[q]
(1)    if( p &lt; q ) {              // 배열의 원소의 수가 2개 이상이면  
(2)    k = |(p+q)/2|              // k=반으로 나누기 위한 중간 원소의 인덱스
(3)    MergeSort(A,p,k)           // 앞부분 순환 호출   
(4)    MergeSort(A,k+1,q)         // 뒷부분 순환 호출
(5)    A[p]~A[k]와 A[k+1]~A[q]를 합병한다.
(6) }
</code></pre></div></div>

<ul>
  <li>Line 1에서는 정렬할 부분의 원소의 수가 2개 이상일 때에만 다음 단계가 수행되도록 한다. 만약 p=q(즉, 원소의 수가 1)이면, 그 자체로 정렬된 것이므로 line 2~5가 수행되지 않은 채 이전 호출했던 곳으로 리턴한다.</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Line 2에서는 정렬할 부분의 원소들을 1/2로 나누기 위해, k =</td>
          <td>(p+q)/2</td>
          <td>를 계산한다. 단, 원소의 수가 홀수인 경우, k는 소수점 이하를 버린 정수이다.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Line 3~4에서는 MergeSort(A,p,k)와 MergeSort(A,k+1,q)를 순환 호출하여 각각 정렬한다.</li>
  <li>Line 5에서는 line 3~4에서 각각 정렬된 부분을 합병한다. 합병 과정의 마지막에는 임시 배열에 있는 합병된 원소들을 배열 A로 복사한다. 즉, 임시 배열 B[p]~[q]로 복사한다.</li>
</ul>

<p>\(\dots\) 
아래 그림은 n=8인 배열 A=[37, 10, 22, 30, 35, 13, 25,24]에 대하여 MergeSort 알고리즘이 수행되는 과정을 보이고 있다. 원 속의 숫자들은 알고리즘이 수행된 순서를 나타낸다.</p>

<p>다음의 그림에서 분활하여 순환 호출하는 것은 line 3~4에서 수행되고, 합병은 line 5에서 수행된다.</p>

<p><img src="https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMDA3MzBfOTAg%2FMDAxNTk2MDcxMTY3Mzkw.HBZBJDLMu2fM7CcS_jBAbfI8mmHSaMZDzGp75iKUTHog.Y5exv5QkBOV_2V1B6zORlBjX_OCPIpnptnD89FF3cr8g.PNG.wongoni%2F%25C4%25B8%25C3%25B3.PNG&amp;type=sc960_832" alt="" /></p>

<h3 id="시간복잡도-알아보기"><em>시간복잡도 알아보기</em></h3>
<h3 id="정렬의-시간복잡도는-일반적으로-숫자의-비교-횟수로-나타낸다">정렬의 시간복잡도는 일반적으로 숫자의 비교 횟수로 나타낸다.</h3>
<p>위 그림에서 알고리즘이 수행한 비교 횟수를 모두 계산해보자. 단, 비교 횟수를 계산할 때, 수행 순서는 무시해도된다.</p>

<p>&lt;분할&gt;</p>

<p>분할하는 부분은 배열의 중간 인덱스 계산과 2번의 순환 호출을 하는 것이므로 O(1) 시간이 걸린다.</p>

<p>&lt;합병&gt;</p>

<p>합병을 하는 수행 시간은 입력의 크기에 비례한다. 즉, 2개의 정렬된 배열 A와 B의 크기가 각각 n과 m이라면, 최대 비교 횟수는 (n+m-1)이다.</p>

<p>왜냐하면 합병하는데 2개의 숫자를 1번 비교할 때마다, 하나의 ‘승자’(즉, 작은 숫자)가 탄생하고, 승자는 합병된 배열 C에 저장되기 때문이다. 따라서 배열 C에는 결국 배열 A와 B의 모든 (n+m)개의 숫자들이 저장되나, 가장 마지막에 저장되는 숫자는 비교할 숫자가 없으므로 최대 비교 횟수는 (n+m-1)이다.</p>

<p>즉 합병의 시간복잡도는 O(m+n)이다.</p>

<p>&lt;합병 정렬에서 수행되는 총 비교 횟수&gt;</p>

<ol>
  <li>각각의 합병에 대해서 몇번의 비교가 수행되었는지를 계산하여 이들을 모두 합한 수이다.</li>
  <li>
    <p>합병 단계에서 각 층별로 살펴보는 것이다</p>

    <p>각 층을 살펴보면 모든 숫자(즉, n=8개의 숫자)가 합병에 참여하고 있다.
 합병의 수행시간은 합병되는 입력 크기에 비례하므로 각 층에서 수행된 비교 횟수는 O(n)이다.</p>

    <p>### <em>그렇다면 입력의 크기가 n일 때에는 몇 개의 층이 만들어질까?</em></p>

    <table>
      <thead>
        <tr>
          <th>입력크기</th>
          <th>예</th>
          <th>층</th>
          <th> </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>n</td>
          <td>8</td>
          <td> </td>
          <td> </td>
        </tr>
        <tr>
          <td>$\frac{n}{2}$</td>
          <td>4</td>
          <td>1층</td>
          <td> </td>
        </tr>
        <tr>
          <td>$\frac{n}{4}$ = $\frac{n}{2^2}$</td>
          <td>2</td>
          <td>2층</td>
          <td> </td>
        </tr>
        <tr>
          <td>$\frac{n}{8}$ = $\frac{n}{2^3}$</td>
          <td>1</td>
          <td>3층</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>

<p>n을 계속하여 $\frac{1}{2}$로 나누다가, 더 이상은 나눌 수 없는 크기인 1이 될 때 분할을 중단한다. 따라서 k번 $\frac{1}{2}$로 분할했으면 k개의 층이 생기는 것이고, k는 n=2^k으로부터 logn임을 알 수 있다.</p>

<p>결과적으로 합병 정렬의 시간복잡도는 (층수)<em>O(n) = logn</em>O(n) = O(nlogn)이다.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[분활 정복(Divide-and-Conquer) 알고리즘이란? 주어진 문제의 입력을 분활하여 문제를 해결(정복)하는 방식의 알고리즘이다.]]></summary></entry><entry><title type="html">Lab-002 HW</title><link href="http://localhost:4000/jekyll/update/2022/03/15/002HW.html" rel="alternate" type="text/html" title="Lab-002 HW" /><published>2022-03-15T19:00:28+09:00</published><updated>2022-03-15T19:00:28+09:00</updated><id>http://localhost:4000/jekyll/update/2022/03/15/002HW</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/03/15/002HW.html"><![CDATA[<h1 id="2주차-수업">2주차 수업</h1>

<ul>
  <li>git설치 및 실행</li>
</ul>

<p>&lt;git 설치&gt;</p>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https:%2F%2Fblog.kakaocdn.net%2Fdn%2Fbi6AzT%2FbtqSATUQsN0%2FZ4UCfkMHtXDBDNaMa6bdW0%2Fimg.png" alt="" /></p>

<ol>
  <li>git init .</li>
</ol>

<p>입력 -&gt; 프로젝트 하면서 처음에 한번만 하면 됨</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>init 명령어: 특정 폴더를 저장소로 만드는 것
. : 현재 디렉토리
.. : 상위 디렉토리
	상위 폴더로 이동하고 싶을 때 -&gt; cd ..
	하위 폴더로 이동하고 싶을 때 -&gt; cd my-awesome-site

상위 폴더에서 나의 my-awesome-site를 git 저장소를 초기화하고 싶을 때 -&gt; 상위 폴더로 이동한 후 git init my-awesome-site 입력
								(이미 my-awesome-site로 들어와있을 때에는 get init . 입력) 

        --&gt;git으로 관리가 되는 파일로 됨 : git이 변경사항을 입력받고 업데이트도 스스로 함
</code></pre></div></div>

<ol>
  <li>편집(post 파일 밑에 파일을 하나 만들기)
    <ul>
      <li>Visual Studio Code 설치 및 실행</li>
    </ul>
  </li>
</ol>

<p>&lt;Visual Studio Code 설치&gt;
<img src="https://medium-company.com/wp-content/uploads/2020/06/vscode01-1024x577.png" alt="" /></p>

<ol>
  <li>
    <p>뉴 파일 생성</p>

    <p>VSCode 클릭 -&gt; New File 생성 -&gt; 년-월-일-파일 이름.md</p>

    <p>VSCode에 입력하고 ( ctrl+s )누르면 저장됨</p>
  </li>
  <li>
    <p>단축키[ ctrl + shift + p ] 입력 후 검색창에 mark 입력 -&gt;  Markdonw : Open preview to the side 클릭하면 입력하면서 결과를 바로 확인 가능</p>

    <p>*<Visual Studio="" Code="" 기능="">*</Visual></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> - #이 여러개 추가 될 수록 글씨체가 작아짐
 -![](사진 링크 복붙) : 사진이 붙여짐
 -[markdown](링크) : 하이퍼링크
</code></pre></div>    </div>
  </li>
  <li>
    <p>git status</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> No commits yet

 Untracked files:

 (use "git add &lt;file&gt;..." to include in what will be committed)

 .gitignore
 404.html
 Gemfile
 Gemfile.lock
 _config.yml                                               
 _posts/
 about.markdown
 index.markdown

 nothing added to commit but untracked files present (use "git add" to track)
</code></pre></div>    </div>

    <p>–&gt; 이 stage에 올라와있지 않은데 이 파일들 중에 stage하고 싶은 파일들을 쓰라고 알려주는 문구</p>
  </li>
</ol>

<p><em>나중에 추가로 코드를 쓰게되면</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git restore --staged&lt;file&gt;
ex) git restore --staged _posts/2022-02-11-Lab-02.md  위 문장 입력후 4번째 순서 다시 하면 됨
</code></pre></div></div>

<ol>
  <li>
    <p>git add : 앞선 파일 들 중에서 stage로 올리는 개념</p>

    <p>(1) 전체 다 올리고 싶다 -&gt; get add . ( . 은 현재 폴더) -&gt; my-awesome-site에 있는 모든 파일(하위, 상위)들이 다 stage에 올라감</p>

    <p>(2) 일부분만 올리고 싶다 -&gt; .gitignore 파일에 기록해주면 기록된 파일을 제외하고 stage에 올라감</p>
  </li>
  <li>
    <p>다시 git add . 으로 올려주고 git status를 입력하면</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Changes to be committed:
 (use "git rm --cached &lt;file&gt;..." to unstage)
 new file:   2022-03-10-hello.markdown
 new file:   2022-03-10-welcome-to-jekyll.markdown
 new file:   2022-03-11-Lab-002.md.markdown
 new file:   2022.03.10-hello.markdown.txt  --&gt;new file 문구가 초록색으로 변하면 stage로 잘 올라갔다는 뜻
</code></pre></div>    </div>

    <p>*(use “git rm –cached <file>..." to unstage) : stage에서 내리고 싶은 파일은 저 문구를 써서 입력해라*</file></p>
  </li>
  <li>
    <p>버전 올리기(commit)</p>

    <p>&lt; 기본 형태 : git commit -m “commit message” &gt;</p>

    <p>ex) 무엇을 고쳐서 버전을 올리는건지 “ “안에 자세히 써야함 “fixed something” , “add something”</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;git commit -m "init"입력&gt;
 [master (root-commit) 3582206] init
 4 files changed, 69 insertions(+)
 create mode 100644 2022-03-10-hello.markdown
 create mode 100644 2022-03-10-welcome-to-jekyll.markdown
 create mode 100644 2022-03-11-Lab-002.md.markdown
 create mode 100644 2022.03.10-hello.markdown.txt
</code></pre></div>    </div>
  </li>
  <li>
    <p>git push : commit했던 내용이 github에 저장됨</p>
    <ol>
      <li>git remote add origin https://github.com/Yejiin21/Yejiin21.github.io.git</li>
      <li>git branch -M main</li>
      <li>git push -u origin main</li>
    </ol>
  </li>
</ol>

<p>git log : commit했던 이력들을 볼 수 있음</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    commit 3582206718b2ec44f0654e40a6eb0606905395c3 (HEAD -&gt; master)
    Author: YeJin &lt;kyg9802@naver.com&gt;
    Date:   Fri Mar 11 18:37:43 2022 +0900

    init
</code></pre></div></div>

<p><em>2주차에서 배운 대표적인 명령어</em>
1) ‘git add’ : 파일을 stage에 올리는 명령어
2) ‘git commit -m “commit message”’ : 파일 버전을 올리는 명령어
3) ‘git push’ : github (온라인 저장소) -&gt; 내가 commit 했던 내용을 복사를 해서 github에 집어넣을 때 사용 -&gt; github 업로드
4) ‘git pull’ : github 다운로드
5) ‘git status’ : 상태보기
6) ‘git log’</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[2주차 수업]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/03/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-03-10T13:21:28+09:00</published><updated>2022-03-10T13:21:28+09:00</updated><id>http://localhost:4000/jekyll/update/2022/03/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/03/10/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>